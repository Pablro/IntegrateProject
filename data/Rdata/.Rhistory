Sum<-function(a,b){
sums=a+b
return (new("Fibonacci",it=b,value=sums))
a=1
b=2
evensum=b
value2=Sum(2,3)
while(b<10){
value=Sum(a,b)
if (value@iterate%%2==0){
evensum=evensum+value@sums
}
}
}
a=1
b=2
evensum=b
value2=Sum(2,3)
while(b<10){
value=Sum(a,b)
if (value@iterate%%2==0){
evensum=evensum+value@sums
}
}
while(b<10){
value=Sum(a,b)
if (value@it%%2==0){
evensum=evensum+value@value
}
}
#Second ProjectEuler problem
# Fibonacci sequence
#The problem consist in suming up all the even numbers of the
#Fibonacci sequences with starting points a=1 and b=2 in which a represents the n-2 and b
#n-1 number of the sequences. The sum up should end until b<4000000
setClass(Class="Fibonacci",
representation(
it="numeric",
value="numeric"
)
)
Sum<-function(a,b){
sums=a+b
return (new("Fibonacci",it=b,value=sums))
a=1
b=2
evensum=b
value2=Sum(2,3)
while(b<10){
value=Sum(a,b)
if (value@it%%2==0){
evensum=evensum+value@value
}
}
}
Sum<-function(a,b){
sums=a+b
return (new("Fibonacci",it=b,value=sums))
a=1
b=2
evensum=b
value2=Sum(2,3)
while(b<10){
value=Sum(a,b)
if (value@it%%2==0){
evensum=evensum+value@value
}
}
}
a=1
b=2
evensum=b
while(b<10){
value=Sum(a,b)
if (value@it%%2==0){
evensum=evensum+value@value
}
a=value@value
b=value@it
}
evensum=b
a=1
b=2
evensum=b
while(b<10){
value=Sum(a,b)
if (value@it%%2==0){
evensum=evensum+value@value
}
a=value@value
b=value@it
}
gc()
gc()
gc()
sampleSelection<-function(filtered_data,working_directory,filename){
setwd(working_directory)
# Randomly select 50 observations
set.seed(123)
filtered_data<-filtered_data[, "Genome.ID", drop = FALSE]
random_sample <- filtered_data[sample(nrow(filtered_data), 50), ]
random_sample
write.table(random_sample, file = paste(gewd(),paste("IntegrateProject/data",filename,sep = "/"),sep = "/"), col.names = FALSE, row.names=FALSE,sep = "\t")
}
library(dplyr)
qualityFilter<- function(data,sigm){
#Calculate the median number of contigs
median_contigs <- median(data$Contigs)
#Calculate the mean and standard deviation of the number of CDS
mean_cds <- mean(data$CDS)
sd_cds <- sd(data$CDS)
#Calculate the mean and standard deviation of the size
mean_size <- mean(data$Size)
sd_size <- sd(data$Size)
#Filter the data based on the specified conditions
filtered_data <- data %>%
filter(
(CDS >= mean_cds - sigm * sd_cds & CDS <= mean_cds + sigm * sd_cds) &
(Size >= mean_size - sigm * sd_size & Size <= mean_size + sigm * sd_size) &
(Genome.Status == "Complete" |
(Genome.Status == "WGS"))
)
return(filtered_data)
}
#libraries
library("dplyr")
library("car")
source("GenomeQualFilter.R")
#setting directory 1
setwd("C:/Users/toros/Desktop")
source("GenomeQualFilter.R")
#Creating the data.
#Original species
#Bifidobacterium longum
bifidodata<- read.table(paste(getwd(),"IntegrateProject/data/bifidobacterium_longum/Bifidobacterium_longum.csv",sep="/"),sep=",",header = T)
#libraries
library("dplyr")
library("car")
source("GenomeQualFilter.R")
#Default working directory
getwd()
setwd("C:/Users/toros/Documents")
getwd()
#Creating the data.
#Original species
#Bifidobacterium longum
bifidodata<- read.table(paste(getwd(),"IntegrateProject/data/bifidobacterium_longum/Bifidobacterium_longum.csv",sep="/"),sep=",",header = T)
View(bifidodata)
#Bordetella pertussis
bordetedata<-read.table(paste(getwd(),"IntegrateProject/data/Bordetella_pertussis/Bordetella pertussis.csv",sep="/"),sep=",",header = T)
#Proposed species
#Bacteroides fragilis
bacterodata<-read.table(paste(getwd(),"IntegrateProject/data/Bacteroides_fragilis_data.csv",sep="/"),sep=",",header = T)
med1=median(bifidodata$Contigs)
med1
mean(bifidodata$Contigs)
threshold1=2.5*med1 #suggest by the authors. Why 2.5 and not 3. for example?
threshold1
#what effect does the threshold has in the downstream analyis?
hist(bifidodata$Contigs)
barplot(bifidodata$Contigs,space=c(0,0)) #Does all low values contigs are okay?
index<- rep(med1,length(bifidodata$Contigs))
index2<- rep(threshold1,length(bifidodata$Contigs))
lines(index,col="red") #median
lines(index2,col="green") #threshold
#Does the median would be a good approach for this case?
#Indeed the dataset contains many values of 1 for the contigs column.
#Hence the question about low values is interesting for this case.
med2=median(bordetedata$Contigs)
med2
mean(bordetedata$Contigs)
threshold2=2.5*med2 #suggest by the authors. Why 2.5 and not 3. for example?
threshold2
#what effect does the threshold has in the downstream analyis?
hist(bordetedata$Contigs)
barplot(bordetedata$Contigs,space=c(0,0)) #Does all low values contigs are okay?
index3<- rep(med2,length(bordetedata$Contigs))
index4<- rep(threshold2,length(bordetedata$Contigs))
lines(index3,col="red") #median
lines(index4,col="green")# threshold
med3=median(bacterodata$Contigs)
med3
mean(bacterodata$Contigs)
threshold3=2.5*med3 #suggest by the authors. Why 2.5 and not 3. for example?
threshold3
#what effect does the threshold has in the downstream analyis?
hist(bacterodata$Contigs)
barplot(bacterodata$Contigs,space=c(0,0)) #Does all low values contigs are okay?
index5<- rep(med3,length(bacterodata$Contigs))
index6<- rep(threshold3,length(bacterodata$Contigs))
lines(index5,col="red") #median
lines(index6,col="green")# threshold
med4=median(nessedata$Contigs)
#Neisseria Meningiditis
nessedata<-read.table(paste(getwd(),"IntegrateProject/data/Neisseria_meningiditis_data.csv",sep="/"),sep=",",header = T)
med4=median(nessedata$Contigs)
med4
mean(nessedata$Contigs)
threshold4=2.5*med4 #suggest by the authors. Why 2.5 and not 3. for example?
threshold4
#what effect does the threshold has in the downstream analyis?
hist(nessedata$Contigs)
barplot(nessedata$Contigs,space=c(0,0)) #Does all low values contigs are okay?
index7<- rep(med4,length(nessedata$Contigs))
index8<- rep(threshold4,length(nessedata$Contigs))
lines(index7,col="red") #median
lines(index8,col="green")# threshold
######################################
#Quality filtering for annotated CDS.
######################################
#Bifidobacterium longum
meCDS1=mean(bifidodata$CDS)
sd1=sd(bifidodata$CDS)
#3 sigma Rule-confidence interval
LCL1=meCDS1-3*sd1
LCL1
UCL1=meCDS1+3*sd1
UCL1
hist(bifidodata$CDS,breaks = 15)
dens1=density(bifidodata$CDS)
plot(dens1)
#Normality inspection
shapiro.test(bifidodata$CDS)
qqPlot(bifidodata$CDS)
meCDS2=mean(bordetedata$CDS)
sd2=sd(bordetedata$CDS)
#3 sigma Rule-confidence interval
LCL2=meCDS2-3*sd2
LCL2
UCL2=meCDS2+3*sd2
UCL2
hist(bordetedata$CDS,breaks = 15)
dens2=density(bordetedata$CDS)
plot(dens2)
#Normality inspection
shapiro.test(bordetedata$CDS)
qqPlot(bordetedata$CDS)
#Bacteroides fragilis
meCDS3=mean(bacterodata$CDS)
sd3=sd(bacterodata$CDS)
#3 sigma Rule-confidence interval
LCL3=meCDS3-3*sd3
LCL3
UCL3=meCDS3+3*sd3
UCL3
hist(bacterodata$CDS,breaks = 15)
dens3=density(bacterodata$CDS)
plot(dens3)
#Normality inspection
shapiro.test(bacterodata$CDS)
qqPlot(bacterodata$CDS)
#Neisseria Meningiditis
meCDS4=mean(nessedata$CDS)
sd4=sd(nessedata$CDS)
#3 sigma Rule-confidence interval
LCL4=meCDS4-3*sd4
LCL4
UCL4=meCDS4+3*sd4
UCL4
hist(nessedata$CDS,breaks = 15)
dens4=density(nessedata$CDS)
plot(dens4)
#Normality inspection
shapiro.test(nessedata$CDS)
qqPlot(nessedata$CDS)
######################################
#Quality filtering for total genome length.
######################################
#Bifidobacterium longum
meCDS5=mean(bifidodata$Size)
sd5=sd(bifidodata$Size)
#3 sigma Rule-confidence interval
LCL5=meCDS5-3*sd5
LCL5
UCL5=meCDS5+3*sd5
UCL5
hist(bifidodata$Size,breaks = 15)
dens5=density(bifidodata$Size)
plot(dens5)
#Normality inspection
shapiro.test(bifidodata$Size)
qqPlot(bifidodata$Size)
meCDS6=mean(bordetedata$Size)
sd6=sd(bordetedata$Size)
#3 sigma Rule-confidence interval
LCL6=meCDS6-3*sd6
LCL6
UCL6=meCDS6+3*sd6
UCL6
hist(bordetedata$Size,breaks = 15)
dens6=density(bordetedata$Size)
plot(dens6)
#Normality inspection
shapiro.test(bordetedata$Size)
qqPlot(bordetedata$Size)
#Bacteroides fragilis
meCDS7=mean(bacterodata$Size)
sd7=sd(bacterodata$Size)
#3 sigma Rule-confidence interval
LCL7=meCDS7-3*sd7
LCL7
UCL7=meCDS7+3*sd7
UCL7
hist(bacterodata$Size,breaks = 15)
dens7=density(bacterodata$Size)
plot(dens7)
#Normality inspection
shapiro.test(bacterodata$Size)
qqPlot(bacterodata$Size)
#Neisseria Meningiditis
meCDS8=mean(nessedata$Size)
meCDS8
sd8=sd(nessedata$Size)
#3 sigma Rule-confidence interval
LCL8=meCDS8-3*sd8
LCL8
UCL8=meCDS8+3*sd8
UCL8
hist(nessedata$Size,breaks = 15)
dens8=density(nessedata$Size)
plot(dens8)
#Normality inspection
shapiro.test(nessedata$Size)
qqPlot(nessedata$Size)
######################
#Data cleaning effects
######################
#Bifidobacterium longum
#Postfiltering
#Data proportion contain compare to 68-95-99 rule (1sig,2sig,3sig)-that should follow a normal distribution
filtered_data1<-qualityFilter(bifidodata,1)
filtered_data2<-qualityFilter(bifidodata,2)
filtered_data3<-qualityFilter(bifidodata,3)
totalnumber<-nrow(bifidodata)
filtnumber1<-nrow(filtered_data1)
filtnumber2<-nrow(filtered_data2)
filtnumber3<-nrow(filtered_data3)
prop1<-filtnumber1/totalnumber
prop2<-filtnumber2/totalnumber
prop3<-filtnumber3/totalnumber
propmatrix.row1<-c(prop1,prop2,prop3)
#Bordetella pertussis
#Postfiltering
#Data proportion contain compare to 68-95-99 rule (1sig,2sig,3sig)-that should follow a normal distribution
filtered_data1<-qualityFilter(bordetedata,1)
filtered_data2<-qualityFilter(bordetedata,2)
filtered_data3<-qualityFilter(bordetedata,3)
totalnumber<-nrow(bordetedata)
filtnumber1<-nrow(filtered_data1)
filtnumber2<-nrow(filtered_data2)
filtnumber3<-nrow(filtered_data3)
prop1<-filtnumber1/totalnumber
prop2<-filtnumber2/totalnumber
prop3<-filtnumber3/totalnumber
propmatrix.row2<-c(prop1,prop2,prop3)
##Bacteroides fragilis
#Postfiltering
#Data proportion contain compare to 68-95-99 rule (1sig,2sig,3sig)-that should follow a normal distribution
filtered_data1<-qualityFilter(bacterodata,1)
filtered_data2<-qualityFilter(bacterodata,2)
filtered_data3<-qualityFilter(bacterodata,3)
totalnumber<-nrow(bacterodata)
filtnumber1<-nrow(filtered_data1)
filtnumber2<-nrow(filtered_data2)
filtnumber3<-nrow(filtered_data3)
prop1<-filtnumber1/totalnumber
prop2<-filtnumber2/totalnumber
prop3<-filtnumber3/totalnumber
propmatrix.row3<-c(prop1,prop2,prop3)
#Neisseria Meningiditis
#Postfiltering
#Data proportion contain compare to 68-95-99 rule (1sig,2sig,3sig)-that should follow a normal distribution
filtered_data1<-qualityFilter(nessedata,1)
filtered_data2<-qualityFilter(nessedata,2)
filtered_data3<-qualityFilter(nessedata,3)
totalnumber<-nrow(nessedata)
filtnumber1<-nrow(filtered_data1)
filtnumber2<-nrow(filtered_data2)
filtnumber3<-nrow(filtered_data3)
prop1<-filtnumber1/totalnumber
prop2<-filtnumber2/totalnumber
prop3<-filtnumber3/totalnumber
propmatrix.row4<-c(prop1,prop2,prop3)
#Final proportion matrix
propmatrix<-rbind(propmatrix.row1,propmatrix.row2,propmatrix.row3,propmatrix.row4)
colnames(propmatrix)<-c("1*sigma","2*sigma","3*sigma")
rownames(propmatrix)<-c("Bifidobacterium","Bordetella","Bacteroides","Meningiditis")
table1<-as.table(propmatrix)
table1
source("GenomeQualFilter.R")
defvalue=getwd()
setwd("C:/Users/toros/Desktop")
source("GenomeQualFilter.R")
source("SampleSelection.R")
set(defvalue)
setwd(defvalue)
getwd()
getwd()
data1=qualityFilter(bordetedata,3)
sampleSelection(data1,defvalue,"random-sample.txt")
sampleSelection(data1,defvalue,"random-sample.txt")
source("SampleSelection.R")
setwd("C:/Users/toros/Desktop")
source("SampleSelection.R")
setwd(defvalue)
getwd()
data1=qualityFilter(bordetedata,3)
sampleSelection(data1,defvalue,"random-sample.txt")
random_sample
data1=qualityFilter(bordetedata,3)
setwd("C:/Users/toros/Desktop")
source("SampleSelection.R")
setwd(defvalue)
getwd()
data1=qualityFilter(bordetedata,3)
sampleSelection(data1,defvalue,"random-sample.txt")
setwd("C:/Users/toros/Desktop")
source("GenomeQualFilter.R")
source("SampleSelection.R")
setwd(defvalue)
getwd()
data1=qualityFilter(bordetedata,3)
sampleSelection(data1,defvalue,"random-sample.txt")
getwd()
#Loading RData
#Remember the default directory in your machines. Later processes start from this point.
getwd()
#Loading RData
#Remember the default directory in your machines. Later processes start from this point.
defdir=getwd()
#Creating the data.
setwd(paste(getwd,"IntegrateProject/data/bv-brc-data",sep="/"))
#Creating the data.
setwd(paste(getwd(),"IntegrateProject/data/bv-brc-data",sep="/"))
#Original species
#Bifidobacterium longum
bifidodata<- read.table("Bifidobacterium_longum.csv",sep=",",header = T)
#Bordetella pertussis
bordetedata<-read.table("Bordetella pertussis.csv",sep=",",header = T)
#Proposed species
#Bacteroides fragilis
bacterodata<-read.table("Bacteroides_fragilis_data.csv",sep=",",header = T)
#Neisseria Meningiditis
nessedata<-read.table("Neisseria_meningiditis_data.csv",sep=",",header = T)
#Saving the data objects:
setwd(paste(defdir,"IntegrateProject/data/Rdata,sep=/"))
#Saving the data objects:
setwd(paste(defdir,"IntegrateProject/data/Rdata",sep="/"))
save(bifidodata,file = "Bifidobacterium.Rdata")
save(bordetedata,file = "Bordetella.Rdata")
save(bacterodata,file = "Bacteroides.Rdata")
save(nessedata,file = "Neisseria.Rdata")
#Marshall Code. Generate a sample file that ca be further used for retrieving data via bash script in the VSC cluster.
setwd(paste(defdir,"IntegratedProject/data/Rdata",sep="/"))
#Marshall Code. Generate a sample file that ca be further used for retrieving data via bash script in the VSC cluster.
setwd(paste(defdir,"IntegrateProject/data/Rdata",sep="/"))
#Bordetella Example
data1=qualityFilter(bordetedata,3)
#The directory where th source code are:
sourdir=paste(defdir,"IntegrateProject/code/Rcode",sep="/")
#Collect the source code from respective directory on your machines.
setwd(sourdir)
#The directory where th source code are:
sourdir=paste(defdir,"IntegrateProject/code/R_code",sep="/")
#Collect the source code from respective directory on your machines.
setwd(sourdir)
source("GenomeQualFilter.R")
source("SampleSelection.R")
#Marshall Code. Generate a sample file that ca be further used for retrieving data via bash script in the VSC cluster.
setwd(paste(defdir,"IntegrateProject/data/Rdata",sep="/"))
#Bordetella Example
data1=qualityFilter(bordetedata,3)
smallSampleSelection(data1,defdir,"50sample.txt")
largeSampleSelection(data1,defdir,"700sample.txt")
#Collect the source code from respective directory on your machines.
setwd(sourdir)
source("GenomeQualFilter.R")
source("SampleSelection.R")
#Marshall Code. Generate a sample file that ca be further used for retrieving data via bash script in the VSC cluster.
setwd(paste(defdir,"IntegrateProject/data/Rdata",sep="/"))
#Bordetella Example
data1=qualityFilter(bordetedata,3)
smallSampleSelection(data1,defdir,"50sample.txt")
largeSampleSelection(data1,defdir,"700sample.txt")
#iMPORTANT NOTE: If the directories structure has changed. This file needs to be modify.
#Follow the navigational directories structure in your local machine.
#For information about assumption of default directory in R:
#the default global working directory in R is in format user/name/Documents
#you can read more about this here: https://statisticsglobe.com/change-default-working-directory-r
#Relevant Note: In this way you can access the RDATA whenever you need it.
#Loading RData
#Remember the default directory in your machines. Later processes start from this point.
defdir=getwd()
#Creating the data.
setwd(paste(defdir,"IntegrateProject/data/bv-brc-data",sep="/"))
#Original species
#Bifidobacterium longum
bifidodata<- read.table("Bifidobacterium_longum.csv",sep=",",header = T)
#Bordetella pertussis
bordetedata<-read.table("Bordetella pertussis.csv",sep=",",header = T)
#Proposed species
#Bacteroides fragilis
bacterodata<-read.table("Bacteroides_fragilis_data.csv",sep=",",header = T)
#Neisseria Meningiditis
nessedata<-read.table("Neisseria_meningiditis_data.csv",sep=",",header = T)
#Saving the data objects:
setwd(paste(defdir,"IntegrateProject/data/Rdata",sep="/"))
save(bifidodata,file = "Bifidobacterium.RData")
save(bordetedata,file = "Bordetella.RData")
save(bacterodata,file = "Bacteroides.RData")
save(nessedata,file = "Neisseria.RData")
load(file="Neisseria.RData")
