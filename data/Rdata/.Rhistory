#iMPORTANT NOTE: If the directories structure has changed. This file needs to be modify.
#Follow the navigational directories structure in your local machine.
#For information about assumption of default directory in R:
#the default global working directory in R is in format user/name/Documents
#you can read more about this here: https://statisticsglobe.com/change-default-working-directory-r
######if you parent directory/default directory does not end with ~/Documents#######
getwd()#for checking in your computer
setwd("C:/Users/toros/Documents")
setwd(defdir)
defdir=C:/Users/toros/Documents
defdir="C:/Users/toros/Documents"
setwd(defdir)
#>>>>>>> main
#Collect the source code from respective directory on your machines.
#Assign sourdir as one child dir, remember to maker sure "IntegrateProject/code/R_code" is right after the path defdir
sourdir=paste(defdir,"IntegrateProject/code/R_code",sep="/")
# setwd to child dir where the following R files are located.
setwd(sourdir)
source("GenomeQualFilter.R")
source("SampleSelection.R")
# Moving to data directory
sourdir=paste(defdir,"IntegrateProject/data/Rdata",sep="/")
setwd(sourdir)
#Requirements:
#Verify that the data objects from the dataset exist. Otherwise
# GO to R_code and run LoadingRData.R mannually
#####Loading data#########
load("Bacteroides.Rdata")
load("Neisseria.Rdata")
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
#First species: Bacteroides
missings1<-paste(sourdir,"bacteroMissing.txt",sep = "/")
missing_ids1 <- readLines(missings1)
missing_ids1 <- as.numeric(missing_ids1)
filtered_data1 <- bacterodata[!bacterodata$Genome.ID %in% missing_ids1, ]
# Identify duplicated Genome.IDs
duplicated_ids <- duplicated(filtered_data1$Genome.ID)
# Keep only the first occurrence of each unique Genome.ID
data_unique <- filtered_data1[!duplicated_ids, ]
new_data_file1=paste(defdir,"IntegrateProject/data/balanceData/Bacteroidefiltered.Rdata",sep="/")
save(data_unique,file = new_data_file1)
######3-Third step quality filtering and sampling##################
data1=qualityFilterProposed(data_unique,3)
#Second species: Neisseria
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
missings2<-paste(sourdir,"nesseMissing.txt",sep = "/")
missing_ids2 <- readLines(missings2)
missing_ids2 <- as.numeric(missing_ids2)
filtered_data2 <- nessedata[!nessedata$Genome.ID %in% missing_ids2, ]
new_data_file2 <- paste(defdir,"IntegrateProject/data/balanceData/Neisseriafiltered.Rdata",sep="/")
save(filtered_data2,file = new_data_file2)
######3-Third step quality filtering and sampling##################
data2=qualityFilterProposed(filtered_data2,3)
smallSampleSelection1(data2,defdir,"50neisseria1_fna.txt","50neisseria1_faa.txt")
smallSampleSelection2(data2,defdir,"50neisseria2_fna.txt","50neisseria2_faa.txt")
largeSampleSelection1(data2,defdir,"400neisseria1_fna.txt","400neisseria1_faa.txt")
largeSampleSelection2(data2,defdir,"400neisseria2_fna.txt","400neisseria2_faa.txt")
#Second species: Neisseria
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
missings2<-paste(sourdir,"nesseMissing.txt",sep = "/")
missing_ids2 <- readLines(missings2)
missing_ids2 <- as.numeric(missing_ids2)
filtered_data2 <- nessedata[!nessedata$Genome.ID %in% missing_ids2, ]
duplicated_ids <- duplicated(filtered_data2$Genome.ID)
# Keep only the first occurrence of each unique Genome.ID
data_unique2 <- filtered_data2[!duplicated_ids, ]
new_data_file2 <- paste(defdir,"IntegrateProject/data/balanceData/Neisseriafiltered.Rdata",sep="/")
save(data_unique2,file = new_data_file2)
######3-Third step quality filtering and sampling##################
data2=qualityFilterProposed(data_unique2,3)
smallSampleSelection1(data2,defdir,"50neisseria1_fna.txt","50neisseria1_faa.txt")
smallSampleSelection2(data2,defdir,"50neisseria2_fna.txt","50neisseria2_faa.txt")
largeSampleSelection1(data2,defdir,"400neisseria1_fna.txt","400neisseria1_faa.txt")
largeSampleSelection2(data2,defdir,"400neisseria2_fna.txt","400neisseria2_faa.txt")
#Instructions:
#Instructions:
#Go to "bash-input-data" and transfer the above files to VSC account. Be sure to be on $VSC_DATA
source("GenomeQualFilter.R")
#>>>>>>> main
#Collect the source code from respective directory on your machines.
#Assign sourdir as one child dir, remember to maker sure "IntegrateProject/code/R_code" is right after the path defdir
sourdir=paste(defdir,"IntegrateProject/code/R_code",sep="/")
# setwd to child dir where the following R files are located.
setwd(sourdir)
source("GenomeQualFilter.R")
source("SampleSelection.R")
# Moving to data directory
sourdir=paste(defdir,"IntegrateProject/data/Rdata",sep="/")
setwd(sourdir)
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
#First species: Bacteroides
missings1<-paste(sourdir,"bacteroMissing.txt",sep = "/")
missing_ids1 <- readLines(missings1)
missing_ids1 <- as.numeric(missing_ids1)
filtered_data1 <- bacterodata[!bacterodata$Genome.ID %in% missing_ids1, ]
# Identify duplicated Genome.IDs
duplicated_ids <- duplicated(filtered_data1$Genome.ID)
# Keep only the first occurrence of each unique Genome.ID
data_unique <- filtered_data1[!duplicated_ids, ]
new_data_file1=paste(defdir,"IntegrateProject/data/balanceData/Bacteroidefiltered.Rdata",sep="/")
save(data_unique,file = new_data_file1)
######3-Third step quality filtering and sampling##################
data1=qualityFilterProposed(data_unique,3)
smallSampleSelection1(data1,defdir,"50bacterosample1_fna.txt","50bacterosample_faa.txt")
smallSampleSelection2(data1,defdir,"50bacterosample2_fna.txt","50bacterosample_faa.txt")
largeSampleSelection1(data1,defdir,"400bacterosample1_fna.txt","400bacterosample_faa.txt")
largeSampleSelection2(data1,defdir,"400bacterosample2_fna.txt","400bacterosample_faa.txt")
#Second species: Neisseria
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
missings2<-paste(sourdir,"nesseMissing.txt",sep = "/")
missing_ids2 <- readLines(missings2)
missing_ids2 <- as.numeric(missing_ids2)
filtered_data2 <- nessedata[!nessedata$Genome.ID %in% missing_ids2, ]
duplicated_ids <- duplicated(filtered_data2$Genome.ID)
# Keep only the first occurrence of each unique Genome.ID
data_unique2 <- filtered_data2[!duplicated_ids, ]
new_data_file2 <- paste(defdir,"IntegrateProject/data/balanceData/Neisseriafiltered.Rdata",sep="/")
save(data_unique2,file = new_data_file2)
######3-Third step quality filtering and sampling##################
data2=qualityFilterProposed(data_unique2,3)
smallSampleSelection1(data2,defdir,"50neisseria1_fna.txt","50neisseria1_faa.txt")
smallSampleSelection2(data2,defdir,"50neisseria2_fna.txt","50neisseria2_faa.txt")
largeSampleSelection1(data2,defdir,"400neisseria1_fna.txt","400neisseria1_faa.txt")
largeSampleSelection2(data2,defdir,"400neisseria2_fna.txt","400neisseria2_faa.txt")
setwd(defdir)
#>>>>>>> main
#Collect the source code from respective directory on your machines.
#Assign sourdir as one child dir, remember to maker sure "IntegrateProject/code/R_code" is right after the path defdir
sourdir=paste(defdir,"IntegrateProject/code/R_code",sep="/")
# setwd to child dir where the following R files are located.
setwd(sourdir)
source("GenomeQualFilter.R")
source("SampleSelection.R")
# Moving to data directory
sourdir=paste(defdir,"IntegrateProject/data/Rdata",sep="/")
setwd(sourdir)
#Requirements:
#Verify that the data objects from the dataset exist. Otherwise
# GO to R_code and run LoadingRData.R mannually
#####Loading data#########
load("Bacteroides.Rdata")
load("Neisseria.Rdata")
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
#First species: Bacteroides
missings1<-paste(sourdir,"bacteroMissing.txt",sep = "/")
missing_ids1 <- readLines(missings1)
missing_ids1 <- as.numeric(missing_ids1)
filtered_data1 <- bacterodata[!bacterodata$Genome.ID %in% missing_ids1, ]
# Identify duplicated Genome.IDs
duplicated_ids <- duplicated(filtered_data1$Genome.ID)
# Keep only the first occurrence of each unique Genome.ID
data_unique <- filtered_data1[!duplicated_ids, ]
new_data_file1=paste(defdir,"IntegrateProject/data/balanceData/Bacteroidefiltered.Rdata",sep="/")
save(data_unique,file = new_data_file1)
######3-Third step quality filtering and sampling##################
data1=qualityFilterProposed(data_unique,3)
smallSampleSelection1(data1,defdir,"50bacterosample1_fna.txt","50bacterosample1_faa.txt")
smallSampleSelection2(data1,defdir,"50bacterosample2_fna.txt","50bacterosample2_faa.txt")
largeSampleSelection1(data1,defdir,"400bacterosample1_fna.txt","400bacterosample1_faa.txt")
largeSampleSelection2(data1,defdir,"400bacterosample2_fna.txt","400bacterosample2_faa.txt")
#Second species: Neisseria
######2-Second step filtering Missing fastas##################
#Requirments:
#Assumes you already have the files with the ids with missing fastas generated in step 1
#Moving to the directory where these files are
sourdir=paste(defdir,"IntegrateProject/data/missing-fasta-ids",sep="/")
missings2<-paste(sourdir,"nesseMissing.txt",sep = "/")
missing_ids2 <- readLines(missings2)
missing_ids2 <- as.numeric(missing_ids2)
filtered_data2 <- nessedata[!nessedata$Genome.ID %in% missing_ids2, ]
duplicated_ids <- duplicated(filtered_data2$Genome.ID)
# Keep only the first occurrence of each unique Genome.ID
data_unique2 <- filtered_data2[!duplicated_ids, ]
new_data_file2 <- paste(defdir,"IntegrateProject/data/balanceData/Neisseriafiltered.Rdata",sep="/")
save(data_unique2,file = new_data_file2)
######3-Third step quality filtering and sampling##################
data2=qualityFilterProposed(data_unique2,3)
smallSampleSelection1(data2,defdir,"50neisseria1_fna.txt","50neisseria1_faa.txt")
smallSampleSelection2(data2,defdir,"50neisseria2_fna.txt","50neisseria2_faa.txt")
largeSampleSelection1(data2,defdir,"400neisseria1_fna.txt","400neisseria1_faa.txt")
largeSampleSelection2(data2,defdir,"400neisseria2_fna.txt","400neisseria2_faa.txt")
library("readr")
library("micropan")
# Based on: https://github.com/larssnip/micropan
library("collapse")
library("ggplot2")
getwd()
defdir="C:/Users/toros/Documents"
#>>>>>>> main
#Collect the source code from respective directory on your machines.
#Assign sourdir as one child dir, remember to maker sure "IntegrateProject/code/R_code" is right after the path defdir
sourdir=paste(defdir,"IntegrateProject/data/Rdata",sep="/")
setwd(sourdir)
#converting csv to Rdata
smallSample <- read.csv('smallData.csv')
#converting csv to Rdata
getwd()
setwd("C:/Users/toros/Desktop/yalindata")
setwd(defdir)
setwd("C:/Users/toros/Desktop/yalindata")
setwd("C:/Users/toros/Desktop")
setwd("C:/Users/toros/Desktop/yanlindata")
smallSample <- read.csv('smallData.csv')
largeSample <- read.csv('largeData.csv')
head(smallSample)
View(smallSample)
#converting csv to Rdata
getwd()
LargePanMatNesseTwo <- read.csv('largeData.csv')
smallPanMatNesseTwo <- read.csv('smallData.csv')
save(smallPanMatNesseTwo,file = "50Nesse2panmatrixCDS.RData")
save(LargePanMatNesseTwo,file = "400Nesse2panmatrixCDS.RData")
library("readr")
library("micropan")
# Based on: https://github.com/larssnip/micropan
library("collapse")
library("ggplot2")
######if you parent directory/default directory does not end with ~/Documents#######
getwd()#for checking in your computer
setwd(defdir)
#>>>>>>> main
#Collect the source code from respective directory on your machines.
#Assign sourdir as one child dir, remember to maker sure "IntegrateProject/code/R_code" is right after the path defdir
sourdir=paste(defdir,"IntegrateProject/data/Rdata",sep="/")
setwd(sourdir)
#Loading CDS panmatrix data
#Neisseria sample 1
#sample of 50
load("50Nesse1panmatrixCDS.RData")
#sample of 400
load("400Nesse1panmatrixCDS.RData")
#Neisseria sample 2
#sample 50
load("50Nesse2panmatrixCDS.RData")
#sample 400
load("400Ness2panmatrixCDS.RData")
#sample 400
load("400Nesse2panmatrixCDS.RData")
#Pangenome size analysis
#Neisseria sample 1
#CDS pangenome
#Convert to matrix
smallPanMatNesseOne<-as.matrix(smallPanMatNesseOne)
LargePanMatNesseOne<-as.matrix(LargePanMatNesseOne)
#Replace NA with zeros
smallPanMatNesseOne<-replace_NA(smallPanMatNesseOne)
LargePanMatNesseOne<-replace_NA(LargePanMatNesseOne)
#Neisseria sample 2
smallPanMatNesseTwo<-as.matrix(smallPanMatNesseTwo)
LargePanMatNesseTwo<-as.matrix(LargePanMatNesseTwo)
#Replace NA with zeros
smallPanMatNesseTwo<-replace_NA(smallPanMatNesseTwo)
LargePanMatNesseTwo<-replace_NA(LargePanMatNesseTwo)
#Heaps Law:
smallheapsnesse=heaps(smallPanMatNesseOne)
#Neisseria 2
smallheapsnesse2=heaps(smallPanMatNesseTwo)
smallheapnesse2
smallheapnesse2
#Neisseria 2
smallheapsnesse2=heaps(smallPanMatNesseTwo)
smallheapsnesse2
#Neisseria sample 2
fittedsmall2<- binomixEstimate(smallPanMatNesseTwo, K.range = 3:20)
# Frequencies estimation by fitting binomial mixture model
#Neisseria 1
fittedsmall <- binomixEstimate(smallPanMatNesseOne, K.range = 3:20)
#Neisseria sample 2
View(smallPanMatNesseTwo)
#Replace NA with zeros
smallPanMatNesseOne<-replace_NA(smallPanMatNesseOne)
smallPanMatNesseTwo <- read.csv('smallData.csv')
setwd("C:/Users/toros/Desktop/yanlindata")
smallPanMatNesseTwo <- read.csv('smallData.csv')
View(smallPanMatNesseTwo)
smallPanMatNesseTwo <- read.csv('smallData.csv',row.names = T)
smallPanMatNesseTwo <- read.csv('smallData.csv')
smallPanMatNesseTwo
rownames=smallPanMatNesseTwo[1,]
rownames
smallPanMatNesseTwo=as.data.frame(smallPanMatNesseTwo,row.names = T)
names1=smallPanMatNesseTwo[1]
rownames(smallPanMatNesseTwo)=names1
names1
rownames(smallPanMatNesseTwo)
rownames(smallPanMatNesseTwo)=names1
names1=as.vector(smallPanMatNesseTwo[1])
names1
rownames(smallPanMatNesseTwo)=names1
length(names1)
rownames(smallPanMatNesseTwo)=names1$X
smallPanMatNesseTwo=smallPanMatNesseTwo[-1]
View(smallPanMatNesseTwo)
#Large dataset
LargePanMatNesseTwo <- read.csv('largeData.csv')
names1=as.vector(LargePanMatNesseTwo[1])
rownames(LargePanMatNesseTwo)=names1$X
LargePanMatNesseTwo=LargePanMatNesseTwo[-1]
save(smallPanMatNesseTwo,file = "50Nesse2panmatrixCDS.RData")
save(LargePanMatNesseTwo,file = "400Nesse2panmatrixCDS.RData")
setwd(defdir)
#>>>>>>> main
#Collect the source code from respective directory on your machines.
#Assign sourdir as one child dir, remember to maker sure "IntegrateProject/code/R_code" is right after the path defdir
sourdir=paste(defdir,"IntegrateProject/data/Rdata",sep="/")
setwd(sourdir)
#Loading CDS panmatrix data
#Neisseria sample 1
#sample of 50
load("50Nesse1panmatrixCDS.RData")
#sample of 400
load("400Nesse1panmatrixCDS.RData")
#Neisseria sample 2
#sample 50
load("50Nesse2panmatrixCDS.RData")
#sample 400
load("400Nesse2panmatrixCDS.RData")
#Pangenome size analysis
#Neisseria sample 1
#CDS pangenome
#Convert to matrix
smallPanMatNesseOne<-as.matrix(smallPanMatNesseOne)
LargePanMatNesseOne<-as.matrix(LargePanMatNesseOne)
#Replace NA with zeros
smallPanMatNesseOne<-replace_NA(smallPanMatNesseOne)
LargePanMatNesseOne<-replace_NA(LargePanMatNesseOne)
#Neisseria sample 2
smallPanMatNesseTwo<-as.matrix(smallPanMatNesseTwo)
LargePanMatNesseTwo<-as.matrix(LargePanMatNesseTwo)
#Replace NA with zeros
smallPanMatNesseTwo<-replace_NA(smallPanMatNesseTwo)
LargePanMatNesseTwo<-replace_NA(LargePanMatNesseTwo)
#Heaps Law:
#neisseria 1
smallheapsnesse=heaps(smallPanMatNesseOne)
largeheapsnesse=heaps(LargePanMatNesseOne)
#Neisseria 2
smallheapsnesse2=heaps(smallPanMatNesseTwo)
largeheapsnesse2=heaps(LargePanMatNesseOneTwo)
LargePanMatNesseTwo<-replace_NA(LargePanMatNesseTwo)
largeheapsnesse2=heaps(LargePanMatNesseTwo)
fittedsmall2<- binomixEstimate(smallPanMatNesseTwo, K.range = 3:20)
fittedlarge2<- binomixEstimate(LargePanMatNesseTwo, K.range = 3:20)
print(fittedsmall2$BIC.tbl)
print(fittedlarge2$BIC.tbl)
#Neisseria sample 2
#Small Dataset
ncomp <- 8
fig6 <- fittedsmall2$Mix.tbl %>%
filter(Components == ncomp) %>%
ggplot() +
geom_col(aes(x = "", y = Mixing.proportion, fill = Detection.prob)) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "Pan-genome gene family distribution")+
scale_fill_gradientn(colors = c("pink", "orange", "green", "cyan", "blue"))
#Core genomes are presume to be in the fraction with a detection probability of 1
#for the accesory genomes. read the paper of micropan.
print(fig6)
#Large dataset
ncomp<-15
fig7<-fittedlarge$Mix.tbl %>%
filter(Components == ncomp) %>%
ggplot() +
geom_col(aes(x = "", y = Mixing.proportion, fill = Detection.prob)) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "Pan-genome gene family distribution") +
scale_fill_gradientn(colors = c("pink", "orange", "green", "cyan", "blue"))
fig7<-fittedlarge2$Mix.tbl %>%
filter(Components == ncomp) %>%
ggplot() +
geom_col(aes(x = "", y = Mixing.proportion, fill = Detection.prob)) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "Pan-genome gene family distribution") +
scale_fill_gradientn(colors = c("pink", "orange", "green", "cyan", "blue"))
#Core genomes are presume to be in the fraction with a detection probability of 1
#for the rest read the paper of micropan.
print(fig7)
